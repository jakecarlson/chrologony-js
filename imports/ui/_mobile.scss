// ----------------------------------------
/* Defines a property which is affected by the safe area */
@mixin SafeAreaTop($propToModify, $add: 0px, $important: false) {
  $importantStr: "";
  @if ($important) {
    $importantStr: "!important";
  }
  #{$propToModify}: #{$add} #{$importantStr};
  //#{$propToModify}: calc(#{$add} + var(--safe-area-inset-top)) #{$importantStr};
  #{$propToModify}: calc(#{$add} + constant(safe-area-inset-top) - 4px) #{$importantStr};
  #{$propToModify}: calc(#{$add} + env(safe-area-inset-top, 0px) - 4px) #{$importantStr};
}

//:root {
//  --safe-area-inset-top: 0px;
//  --safe-area-inset-right: 0px;
//  --safe-area-inset-bottom: 0px;
//  --safe-area-inset-left: 0px;
//}

#status {
  position: fixed;
  z-index: 999;
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, .85);
  @include SafeAreaTop(height);
}

/* if backdrop support: very transparent and blurred */
@supports ((-webkit-backdrop-filter: blur(2rem)) or (backdrop-filter: blur(2em))) {
  #status {
    background-color: rgba(0, 0, 0, .675);
    -webkit-backdrop-filter: blur(2rem);
    backdrop-filter: blur(2rem);
  }
}

.mobile-app {
  @include SafeAreaTop(padding-top);
}

#alert {
  @include SafeAreaTop(top, 8px);
}

@media (orientation: landscape) {
  .mobile-app .container-fluid {
    padding-left: unquote('max(env(safe-area-inset-left), 15px) !important'); // iOS
    padding-right: unquote('max(env(safe-area-inset-right), 15px) !important'); // iOS
  }
}